<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>leetcode on ZMY&#39;s Blog</title>
    <link>https://blog.zhangmengyang.tk/tags/leetcode/</link>
    <description>Recent content in leetcode on ZMY&#39;s Blog</description>
    <image>
      <url>https://blog.zhangmengyang.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.zhangmengyang.tk/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 25 Sep 2022 23:11:19 +0800</lastBuildDate><atom:link href="https://blog.zhangmengyang.tk/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 304</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-304/</link>
      <pubDate>Sun, 25 Sep 2022 23:11:19 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-304/</guid>
      <description>思路 利用前缀和的思想轻松秒杀，需要注意在preSum中，第[n + 1, n+1]个元素存的是matrix前n*n个元素的和，整体往右下挪一位
还需要注意做减法时，会多减一块区域，需要加回来
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class NumMatrix { int[][] preSum; public NumMatrix(int[][] matrix) { preSum = new int[matrix.length + 1][matrix[0].length + 1]; for (int i = 1; i &amp;lt; preSum.length; i++) { for (int j = 1; j &amp;lt; preSum[0].length; j++) { preSum[i][j] = preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1] + matrix[i - 1][j - 1]; } } } public int sumRegion(int row1, int col1, int row2, int col2) { return preSum[row2 + 1][col2 + 1] - preSum[row1][col2 + 1] - preSum[row2 + 1][col1] + preSum[row1][col1]; } } References 1.</description>
    </item>
    
    <item>
      <title>LeetCode 303</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-303/</link>
      <pubDate>Sun, 25 Sep 2022 22:41:54 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-303/</guid>
      <description>思路 利用前缀和的思想轻松秒杀，需要注意在preSum中，第n + 1个元素存的是nums前n个元素的和，整体往后挪一位
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class NumArray { int[] preSum; public NumArray(int[] nums) { preSum = new int[nums.length + 1]; for (int i = 1; i &amp;lt; preSum.length; i++) { preSum[i] = preSum[i - 1] + nums[i - 1]; } } public int sumRange(int left, int right) { return preSum[right + 1] - preSum[left]; } } References 1.</description>
    </item>
    
    <item>
      <title>LeetCode 3</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-3/</link>
      <pubDate>Sun, 25 Sep 2022 22:16:07 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-3/</guid>
      <description>思路 利用滑动窗口的思想，如果窗口内相同元素超过1个，那么就开始收缩直到相同元素被移出，此时窗口内必定没有重复元素，记录一下此时的窗口大小，找出窗口最大时的长度就可以了
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int lengthOfLongestSubstring(String s) { Map&amp;lt;Character, Integer&amp;gt; window = new HashMap&amp;lt;&amp;gt;(); int left = 0, right = 0, ans = 0; while (right &amp;lt; s.length()) { char c = s.charAt(right); right++; window.put(c, window.getOrDefault(c, 0) + 1); while (window.get(c) &amp;gt; 1) { char d = s.</description>
    </item>
    
    <item>
      <title>LeetCode 438</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-438/</link>
      <pubDate>Sun, 25 Sep 2022 21:52:06 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-438/</guid>
      <description>思路 同LeetCode-567，只不过找到子串后不直接返回而是存一下，同样是两种思路，详见：https://blog.zhangmengyang.tk/leetcodes/leetcode-567/
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public List&amp;lt;Integer&amp;gt; findAnagrams(String s, String p) { Map&amp;lt;Character, Integer&amp;gt; need = new HashMap&amp;lt;&amp;gt;(); Map&amp;lt;Character, Integer&amp;gt; window = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; p.length(); i++) { char c = p.</description>
    </item>
    
    <item>
      <title>LeetCode 567</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-567/</link>
      <pubDate>Sun, 25 Sep 2022 18:13:05 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-567/</guid>
      <description>思路 我的思路：利用滑动窗口的思想，移入窗口一个字符，就收缩窗口直到这个移入的字符在窗口里的数目与s1保持一致，换句话说，保证窗口内不存在非法的字符，当窗口的长度和s1的长度一样时，就找到了这个子串
labuladong的思路：利用滑动窗口的思想，始终保持窗口大小为s1.size()-1，每次移入窗口一个元素，检查一下是否找到子串，如果没有，再让一个元素移出窗口，直到找到这个子串
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public boolean checkInclusion(String s1, String s2) { Map&amp;lt;Character, Integer&amp;gt; need = new HashMap&amp;lt;&amp;gt;(); Map&amp;lt;Character, Integer&amp;gt; window = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; s1.length(); i++) { char c = s1.</description>
    </item>
    
    <item>
      <title>LeetCode 76</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-76/</link>
      <pubDate>Sun, 25 Sep 2022 17:01:39 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-76/</guid>
      <description>思路 利用滑动窗口的思想，窗口内包含t的所有字符后收缩窗口，同时维护最小覆盖子串的两端的位置，详见LeetCode-note思想章节
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public String minWindow(String s, String t) { Map&amp;lt;Character, Integer&amp;gt; need = new HashMap&amp;lt;&amp;gt;(); Map&amp;lt;Character, Integer&amp;gt; window = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; t.</description>
    </item>
    
    <item>
      <title>LeetCode 周赛-312</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-%E5%91%A8%E8%B5%9B-312/</link>
      <pubDate>Sun, 25 Sep 2022 15:22:34 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-%E5%91%A8%E8%B5%9B-312/</guid>
      <description>思路 第一题 排序，不解释
第二题 按位与只会越与越小，那既然要找最大的结果，那遍历一遍数组统计一下最大的数出现了几次就可以了
第三题 暴力会超时，利用动态规划的思想，从左往右遍历一遍找各元素左边递减的元素个数，从右往左遍历一遍找各元素右边递增的元素个数，然后和k比较就可以了
我的代码 第一题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public String[] sortPeople(String[] names, int[] heights) { People[] peoples = new People[names.length]; for(int i = 0; i &amp;lt; peoples.length; i++) { peoples[i] = new People(names[i], heights[i]); } Arrays.sort(peoples, (a, b) -&amp;gt; b.height - a.</description>
    </item>
    
    <item>
      <title>LeetCode 34</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-34/</link>
      <pubDate>Sun, 25 Sep 2022 00:24:53 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-34/</guid>
      <description>思路 进阶版二分查找，寻找target的左右边界，在进阶版二分查找的二分阶段根据左边界或右边界的特征，选择合适的二分条件即可，来两次二分查找，分别查找左边界或右边界即可，详见LeetCode-note
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public int[] searchRange(int[] nums, int target) { if (nums.length == 0) { return new int[]{-1, -1}; } int left = 0, right = nums.length - 1; while (left &amp;lt; right) { int mid = left + (right - left) / 2; if (target &amp;gt; nums[mid]) { left = mid + 1; } else { right = mid; } } if (nums[left] !</description>
    </item>
    
    <item>
      <title>LeetCode 704</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-704/</link>
      <pubDate>Sat, 24 Sep 2022 16:18:38 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-704/</guid>
      <description>思路 经典二分查找，不解释
详见：https://labuladong.gitee.io/algo/2/20/29/
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int search(int[] nums, int target) { int left = 0, right = nums.length - 1; while (left &amp;lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } else if (nums[mid] &amp;gt; target) { right = mid -1; } else if (nums[mid] &amp;lt; target) { left = mid + 1; } } return -1; } } References 1.</description>
    </item>
    
    <item>
      <title>LeetCode 5</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-5/</link>
      <pubDate>Sat, 24 Sep 2022 15:30:02 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-5/</guid>
      <description>思路 遍历一遍数组，同时从中心向两边寻找回文串，并且保存最长的即可。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public String longestPalindrome(String s) { String res = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; s.length(); i++) { // 从中心向两边寻找回文串 String s1 = findPalindrome(s, i, i); String s2 = findPalindrome(s, i, i + 1); res = res.length() &amp;gt;= s1.length() ? res : s1; res = res.</description>
    </item>
    
    <item>
      <title>LeetCode 344</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-344/</link>
      <pubDate>Sat, 24 Sep 2022 15:10:28 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-344/</guid>
      <description>思路 利用左右指针的思想，从两边向中间逼近，同时交换左右的值
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public void reverseString(char[] s) { int left = 0, right = s.length -1 ; while (left &amp;lt; right) { char temp = s[left]; s[left] = s[right]; s[right] = temp; left++; right--; } } } References 1. 反转字符串 </description>
    </item>
    
    <item>
      <title>LeetCode 167</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-167/</link>
      <pubDate>Sat, 24 Sep 2022 14:58:51 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-167/</guid>
      <description>思路 利用左右指针的思想，从两边向中间逼近，如果左右之和太大，那就right&amp;ndash;，否则left++，直到左右之和等于target。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int[] twoSum(int[] numbers, int target) { int left = 0, right = numbers.length - 1; while (left &amp;lt; right) { int sum = numbers[left] + numbers[right]; if (sum &amp;gt; target) { right--; } else if (sum &amp;lt; target) { left++; } else { return new int[]{left + 1, right + 1}; } } return new int[]{0, 0}; } } References 1.</description>
    </item>
    
    <item>
      <title>LeetCode 26&#43;83&#43;27&#43;283</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-26&#43;83&#43;27&#43;283/</link>
      <pubDate>Sat, 24 Sep 2022 14:13:53 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-26&#43;83&#43;27&#43;283/</guid>
      <description>思路 都属于快慢指针里的原地修改数组问题（数组元素去重问题）
26 慢指针指向当前已经去重的数据的最后一个，快指针去前面探路，碰到和slow不一样的数据就让这个数据放在slow后面，slow++。
83 同26，只不过是链表，要注意去重后要把slow后面的链表断开，否则slow后面可能会有和slow重复的。
27 同26，只不过不是比较slow和fast的元素，而是让fast和确定的值比较。
283 同27，只不过得把slow后面的改成0。
我的代码 26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int removeDuplicates(int[] nums) { int slow = 0, fast = 0; while (fast &amp;lt; nums.length) { if (nums[fast] != nums[slow]) { slow++; nums[slow] = nums[fast]; } fast++; } return slow + 1; } } 83 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public ListNode deleteDuplicates(ListNode head) { if (head == null) { return null; } ListNode slow = head, fast = head; while (fast !</description>
    </item>
    
    <item>
      <title>LeetCode 234 快慢指针&#43;反转链表</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-234-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88&#43;%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 24 Sep 2022 00:05:26 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-234-%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88&#43;%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>思路 先用快慢指针找到链表的中点，从而找到回文串的后一半，然后将后一半反转，然后判断前后两部分是否相等就行了。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public boolean isPalindrome(ListNode head) { // 快慢指针找中点 ListNode slow = head, fast = head; while (fast != null &amp;amp;&amp;amp; fast.next != null) { fast = fast.next.next; slow = slow.</description>
    </item>
    
    <item>
      <title>LeetCode 234 链表后序遍历</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-234-%E9%93%BE%E8%A1%A8%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 24 Sep 2022 00:00:43 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-234-%E9%93%BE%E8%A1%A8%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</guid>
      <description>思路 链表也可以后序遍历，这道题只需要使用后序遍历，然后提前存一下head，从两边向中间逼近就可以了。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { private ListNode left; public boolean isPalindrome(ListNode head) { left = head; return traverse(head); } private boolean traverse(ListNode right) { if (right == null) { return true; } boolean res = traverse(right.next); res = res &amp;amp;&amp;amp; (left.val == right.val); left = left.next; return res; } } References 1.</description>
    </item>
    
    <item>
      <title>LeetCode 25</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-25/</link>
      <pubDate>Fri, 23 Sep 2022 23:21:30 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-25/</guid>
      <description>思路 1、先反转以 head 开头的 k 个元素。
2、将第 k + 1 个元素作为 head 递归调用 reverseKGroup 函数。
3、将上述两个过程的结果连接起来。
注意base case为最后元素不足 k 个时的情况
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Solution { private ListNode reverse(ListNode a, ListNode b) { // 这个做法需要对第一个节点特殊判断 // if (head == null) { // return null; // } // // ListNode pre = head, cur = head.</description>
    </item>
    
    <item>
      <title>LeetCode 92</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-92/</link>
      <pubDate>Fri, 23 Sep 2022 22:52:35 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-92/</guid>
      <description>思路 与反转链表前n个节点区别在于不是从第一个节点开始反转，而是从left开始，那么只需要利用递归一次head往后移一位，left和right分别减一的特性，把head移到left的位置，然后反转前n个节点即可。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { private ListNode succesor = null;	// 后驱节点 public ListNode reverseN(ListNode head, int n) { // 递归出口 if (n == 1) { succesor = head.next; return head; } ListNode last = reverseN(head.next, n - 1); head.next.next = head; head.next = succesor; return last; } public ListNode reverseBetween(ListNode head, int left, int right) { if (left == 1) { return reverseN(head, right); } head.</description>
    </item>
    
    <item>
      <title>反转链表前n个节点</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E5%89%8Dn%E4%B8%AA%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 23 Sep 2022 22:20:19 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E5%89%8Dn%E4%B8%AA%E8%8A%82%E7%82%B9/</guid>
      <description>思路 解决思路和反转整个链表差不多，只要稍加修改即可：
1、base case 变为 n == 1，反转一个元素，就是它本身，同时要记录后驱节点。
2、刚才我们直接把 head.next 设置为 null，因为整个链表反转后原来的 head 变成了整个链表的最后一个节点。但现在 head 节点在递归反转之后不一定是最后一个节点了，所以要记录后驱 successor（第 n + 1 个节点），反转之后将 head 连接上。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { private ListNode succesor = null;	// 后驱节点 public ListNode reverseN(ListNode head, int n) { // 递归出口 if (n == 1) { succesor = head.next; return head; } ListNode last = reverseN(head.</description>
    </item>
    
    <item>
      <title>LeetCode 206</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-206/</link>
      <pubDate>Fri, 23 Sep 2022 22:01:54 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-206/</guid>
      <description>思路 利用递归的思想，先反转head后面的，然后把head也反转即可。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public ListNode reverseList(ListNode head) { // 递归出口 if (head == null || head.next == null) { return head; } ListNode last = reverseList(head.next); head.next.next = head; head.next = null; return last; } } References 1. 反转链表 </description>
    </item>
    
    <item>
      <title>LeetCode 160</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-160/</link>
      <pubDate>Fri, 23 Sep 2022 15:29:13 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-160/</guid>
      <description>思路 找到相交点的关键是将相交点之前的节点数凑成相等的，这样的话同时遍历，如果相等的话就是相交了。怎么凑呢？将两个链表连接一下，节点数不就想等了吗。
代码实现方面，可以考虑四种情况：
长度相等，有相交 长度相等，无相交 长度不等，有相交 长度不等，无相交 符合这四种情况的链表连接方法如下：
l1 -&amp;gt; null -&amp;gt; l2 -&amp;gt; null
l2 -&amp;gt; null -&amp;gt; l1 -&amp;gt; null
另一种做法：将某一条链表首尾相连，该问题就转换为寻找有环链表的环起点问题。
分析过程 难点在于，由于两条链表的长度可能不同，两条链表之间的节点无法对应：
如果用两个指针 p1 和 p2 分别在两条链表上前进，并不能同时走到公共节点，也就无法得到相交节点 c1。
解决这个问题的关键是，通过某些方式，让 p1 和 p2 能够同时到达相交节点 c1。
所以，我们可以让 p1 遍历完链表 A 之后开始遍历链表 B，让 p2 遍历完链表 B 之后开始遍历链表 A，这样相当于「逻辑上」两条链表接在了一起。
如果这样进行拼接，就可以让 p1 和 p2 同时进入公共部分，也就是同时到达相交节点 c1：
那你可能会问，如果说两个链表没有相交点，是否能够正确的返回 null 呢？
这个逻辑可以覆盖这种情况的，相当于 c1 节点是 null 空指针嘛，可以正确返回 null。
转载于： https://labuladong.gitee.io/algo/2/19/18/
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { ListNode p1 = headA, p2 = headB; while (p1 !</description>
    </item>
    
    <item>
      <title>LeetCode 142</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-142/</link>
      <pubDate>Fri, 23 Sep 2022 15:02:29 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-142/</guid>
      <description>思路 寻找环的起点，利用快慢指针的思想并且稍做分析，即可得出结论：当快慢指针相遇时，让其中任一个指针指向头节点，然后让它俩以相同速度前进，再次相遇时所在的节点位置就是环开始的位置。
分析过程 我们假设快慢指针相遇时，慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步：
fast 一定比 slow 多走了 k 步，这多走的 k 步其实就是 fast 指针在环里转圈圈，所以 k 的值就是环长度的「整数倍」。
假设相遇点距环的起点的距离为 m，那么结合上图的 slow 指针，环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。
巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点。因为结合上图的 fast 指针，从相遇点开始走k步可以转回到相遇点，那走 k - m 步肯定就走到环起点了：
所以，只要我们把快慢指针中的任一个重新指向 head，然后两个指针同速前进，k - m 步后一定会相遇，相遇之处就是环的起点了。
转载于：https://labuladong.gitee.io/algo/2/19/18/
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public class Solution { public ListNode detectCycle(ListNode head) { ListNode slow = head, fast = head; // 寻找相遇点 while (fast !</description>
    </item>
    
    <item>
      <title>LeetCode 141</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-141/</link>
      <pubDate>Fri, 23 Sep 2022 14:49:25 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-141/</guid>
      <description>思路 利用快慢指针的思想，如果快指针为空，说明没有环，如果快慢指针相遇说明有环
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class Solution { public boolean hasCycle(ListNode head) { ListNode slow = head, fast = head; // 快慢指针如果相遇，说明链表有环 while (fast != null &amp;amp;&amp;amp; fast.next != null) { fast = fast.next.next; slow = slow.next; if (fast == slow) { return true; } } return false; } } References 1. 环形链表 </description>
    </item>
    
    <item>
      <title>LeetCode 876</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-876/</link>
      <pubDate>Fri, 23 Sep 2022 14:18:22 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-876/</guid>
      <description>思路 利用快慢指针的思想，每当慢指针 slow 前进一步，快指针 fast 就前进两步，这样，当 fast 走到链表末尾时，slow 就指向了链表中点。
需要注意的是，如果链表长度为偶数，也就是说中点有两个的时候，我们这个解法返回的节点是靠后的那个节点。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public ListNode middleNode(ListNode head) { ListNode slow = head, fast = head; // 经典快慢指针 while (fast != null &amp;amp;&amp;amp; fast.next != null) { fast = fast.next.next; slow = slow.next; } return slow; } } References 1. 链表的中间结点 </description>
    </item>
    
    <item>
      <title>LeetCode 19</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-19/</link>
      <pubDate>Fri, 23 Sep 2022 12:32:27 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-19/</guid>
      <description>思路 关键是找到倒数第n+1个节点，找到倒数第n个节点的做法：先让p1指针走n步，然后p1和p2指针一起动，当p1指针到头了的时候，p2指针指向的就是需要找的节点。
注意使用dummy节点可以避免特殊性，比如就5个节点，删除倒数第5个，那需要找倒数第6个节点，可是总共就5个节点，会有空指针。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { private ListNode findFromEnd(ListNode head, int n) { ListNode p1 = head; // 先让p1指针走n步 for (int i = 0; i &amp;lt; n; i++) { p1 = p1.next; } ListNode p2 = head; // p1指针走到头，p2指针指向的就是需要找的节点 while (p1 !</description>
    </item>
    
    <item>
      <title>LeetCode 23</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-23/</link>
      <pubDate>Fri, 23 Sep 2022 10:47:55 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-23/</guid>
      <description>思路 每次取出一个最小的加到链表中去，那问题就是怎么高效的获取最小的节点，这很明显用优先队列（二叉堆）就可以解决这个问题。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public ListNode mergeKLists(ListNode[] lists) { if (lists.length == 0) { return null; } // 创建优先队列，将头节点加入 ListNode dummy = new ListNode(-1), p = dummy; PriorityQueue&amp;lt;ListNode&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(lists.length, (a, b) -&amp;gt; { return a.val - b.</description>
    </item>
    
    <item>
      <title>LeetCode 86</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-86/</link>
      <pubDate>Fri, 23 Sep 2022 00:09:37 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-86/</guid>
      <description>思路 从头到尾遍历一遍链表，将小于x的放到一个链表里，将大于等于x的放到一个链表里，最后再拼接这两个链表即可，注意dummy节点的使用。
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public ListNode partition(ListNode head, int x) { ListNode dummy1 = new ListNode(-1), dummy2 = new ListNode(-1); ListNode p1 = dummy1, p2 = dummy2, p = head; while (p != null) { if (p.val &amp;lt; x) { p1.next = p; p1 = p1.next; } else { p2.</description>
    </item>
    
    <item>
      <title>LeetCode 21</title>
      <link>https://blog.zhangmengyang.tk/leetcodes/leetcode-21/</link>
      <pubDate>Thu, 22 Sep 2022 23:42:59 +0800</pubDate>
      
      <guid>https://blog.zhangmengyang.tk/leetcodes/leetcode-21/</guid>
      <description>思路 不解释
我的代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public ListNode mergeTwoLists(ListNode list1, ListNode list2) { ListNode dummy = new ListNode(-1), p = dummy; while (list1 != null &amp;amp;&amp;amp; list2 != null) { if (list1.val &amp;lt; list2.val) { p.next = list1; list1 = list1.next; } else { p.next = list2; list2 = list2.</description>
    </item>
    
  </channel>
</rss>
